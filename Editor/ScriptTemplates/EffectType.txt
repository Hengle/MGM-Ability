using Unity.Collections;
using Unity.Entities;

using WaynGroup.Mgm.Ability;

namespace #SCRIPTNAME#
{
    public struct #SCRIPTNAME# : IEffect
    {
        public TargetingMode Affects { get; set; }
    }

    public struct #SCRIPTNAME#Context : IEffectContext
    {
    }

    public class #SCRIPTNAME#TriggerSystem : AbilityEffectTriggerSystem<#SCRIPTNAME#, #SCRIPTNAME#ConsumerSystem, #SCRIPTNAME#TriggerSystem.EffectWriter, #SCRIPTNAME#Context>
    {
        public struct EffectWriter : IEffectContextWriter<#SCRIPTNAME#Context>
        {
            public void PrepareChunk(ArchetypeChunk chunk)
            {
            }

            public #SCRIPTNAME#Context BuildEffectContext(int entityIndex)
            {
                return default;
            }
        }

    }

    public class #SCRIPTNAME#ConsumerSystem : AbilityEffectConsumerSystem<#SCRIPTNAME#, #SCRIPTNAME#Context>
    {

        protected override void Consume()
        {
            NativeMultiHashMap<Entity, ContextualizedEffect> effects = _effects;
            Entities.WithReadOnly(effects).ForEach((ref Entity targetEntity) =>
            {
                NativeMultiHashMap<Entity, ContextualizedEffect>.Enumerator effectEnumerator = effects.GetValuesForKey(targetEntity);
                while (effectEnumerator.MoveNext())
                {
					
                }
            }).WithBurst()
            .ScheduleParallel();
        }
    }

}